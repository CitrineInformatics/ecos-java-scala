package io.citrine.ecos

object RunECOS extends App {

  val nativeECOSScala = new NativeECOS()

  println(s"ECOS version ${nativeECOSScala.EcosVer()}")

  /* ECOS Example  */

  val n = 223
  val m = 220
  val p = 114
  val l = 201
  val ncones = 6

  val c = /* c[223] */ Array(0.0, 0.0, 0.0, 0.5) ++ Array.fill(100)(1.0) ++ Array.fill(119)(0.0)
  assert(c.length == 223, s"c has length ${c.length} instead of 223")
  val h = /* h[220] */ Array.fill(220)(0.0)
  val q = /* q[6] */ Array(3, 3, 3, 3, 3, 4)
  val Gjc = /* Gjc[224] */ Array(0, 0, 0) ++ (0 to 220).toArray[Int]
  assert(Gjc.length == 224, s"Gjc has length ${Gjc.length} instead of 224")
  val Gir = /* Gir[220] */ (0 to 219).toArray[Int]
  assert(Gir.length == 220, s"Gir has length ${Gir.length} instead of 220")
  val Gpr = /* Gpr[220] */ Array.fill(220)(-1.000000000000000000e+000)
  val Ajc = /* Ajc[224] */ Array(0, 111, 222, 322) ++
    (324 to 524).toArray[Int] ++
    Array(539, 540, 541, 564, 565, 566, 589, 590, 591, 618, 619, 620) ++
    (632 to 638).toArray[Int]
  assert(Ajc.length == 224, s"Ajc has length ${Ajc.length} instead of 224")
  val Air = /* Air[638] */ (0 to 109).toArray[Int] ++ Array(111) ++
    (0 to 109).toArray[Int] ++ Array(112) ++
    (0 to 99).toArray[Int] ++ Array(110, 113) ++
    (0 to 99).toArray[Int] ++
    (0 to 99).toArray[Int] ++
    Array(3, 9, 15, 27, 53, 54, 57, 66, 67, 71, 74, 87, 92, 96, 98, 100, 101,
    2, 8, 12, 19, 29, 30, 34, 37, 39, 42, 43, 44, 47, 50, 51, 56,
    59, 70, 73, 79, 82, 85, 94, 102, 103, 0, 4, 7, 13, 14, 16, 17,
    21, 23, 28, 31, 33, 36, 38, 60, 64, 78, 81, 88, 90, 91, 95, 99,
    104, 105, 1, 6, 10, 20, 22, 26, 32, 35, 41, 46, 48, 49, 52, 55,
    58, 65, 68, 69, 75, 76, 77, 80, 83, 84, 86, 93, 97, 106, 107,
    5, 11, 18, 24, 25, 40, 45, 61, 62, 63, 72, 89, 108, 109, 110,
    111, 112, 113)
  assert(Air.length == 638, s"Air has length ${Air.length} instead of 638")
  val Apr = /* Apr[638] */ Array(-6.748099080141577400e-001,
    9.587587238674218900e-001, -3.380262965696901900e-001,
    -6.289006455522118100e-001, 1.458932368908371500e+000,
    8.103505672584934100e-001, -8.308676110497204000e-002,
    2.638152658681099300e+000, 1.000625209233638700e+000,
    1.443285740856571400e-001, 1.198960671699122800e+000,
    8.042866751960948700e-001, -2.146877760548437900e-002,
    1.252109754253975600e+000, 1.681372772953815700e+000,
    1.160558110039982400e+000, 8.971595941547876300e-001,
    9.934462168535226300e-001, 4.030425643552826300e-003,
    4.520907269135507900e-001, 1.957531681292445900e+000,
    8.367513704018149100e-001, -8.919073879004054700e-001,
    1.364968014685880000e-001, -5.391443069926015200e-001,
    1.218605709809697200e+000, 1.379628849398701500e+000,
    7.705722581573115600e-002, -9.721580354507602900e-001,
    1.341091680254979900e+000, 1.416856131617781900e+000,
    1.367782802004573000e+000, 9.310015370881947700e-001,
    1.025960903569425500e+000, 4.418055920652105800e-001,
    1.797608571927105100e-001, -1.566236421056189400e+000,
    -1.293790728779894400e-001, -2.548793507296202000e-001,
    -1.327158583802827700e+000, 8.378869252146687900e-001,
    9.208088134425553900e-001, 8.954835779157467300e-001,
    1.872488747783192400e+000, 1.607749082930002300e-001,
    1.703097419135647200e+000, 1.485966470102646500e+000,
    1.950727391193988900e+000, 1.261282074772785800e+000,
    2.116080672704367100e+000, 4.418819171779880300e-001,
    -6.070414095655145600e-001, 2.236741804227308500e-001,
    -1.390565074056968600e+000, -3.689063294445240100e-001,
    6.275925564016111600e-001, 9.419119351808997700e-001,
    2.051844704916749900e-002, -2.055013180419911200e+000,
    -8.138411920140069500e-001, -1.670986440999406000e+000,
    -4.312826132928389000e-001, -1.317178055102502500e-001,
    4.129877571668971700e-002, -1.178000809237306800e-001,
    -5.094809536848188300e-002, 4.887140456297478000e-001,
    -6.048920026011540600e-001, -1.622657687025348600e+000,
    9.468924561461561400e-002, -1.076752006167445400e+000,
    -4.544402225817885700e-001, -1.138681599263542200e+000,
    6.297099350763062400e-001, 7.161553122227841700e-001,
    -2.326213079050594200e-001, -2.421425730439526200e-001,
    -3.527400894253913700e-001, -5.991000491511071500e-001,
    -4.501982881436522000e-001, -1.073527618321097300e+000,
    -1.837831580649836900e+000, -1.093506922417250900e+000,
    3.123080272148109900e-002, 4.764624397863112500e-001,
    -9.744593174286131400e-001, -5.475935551016516400e-001,
    -1.185577848308040100e+000, -1.512429413719079500e+000,
    -8.503358079552569800e-001, -1.048119449917124500e+000,
    -2.950353712891531400e-001, 4.436355670528358600e-001,
    -1.976143927829304500e+000, -1.154872945269262400e-001,
    -8.267783537066453200e-001, -2.524533500828647400e-001,
    -2.934013148063512300e-001, -9.559308197633347200e-001,
    -5.099545278978906400e-001, 7.104569782287112300e-001,
    2.586151051423653000e-001, 9.670875274511733200e-001,
    -1.580472136196336100e-001, 4.036019169202506600e-001,
    -4.419329075671284400e-001, 1.335760493316310000e-001,
    -2.443367984060260100e-001, 5.346171843774407700e-001,
    9.240837092450902800e-002, 1.000000000000000000e+000,
    -7.627629774659758300e+000, -8.317906940770274800e+000,
    -7.063111046330970300e+000, -8.991213209598194900e+000,
    -7.132056801314573300e+000, -6.933147988332642300e+000,
    -8.002850393982971200e+000, -7.763929473153173600e+000,
    -7.316196508551362500e+000, -6.857489440772187800e+000,
    -6.933435917031895100e+000, -8.453055934420948600e+000,
    -7.746956878849250200e+000, -6.987480243537588000e+000,
    -6.898256465718047200e+000, -7.035033952525910900e+000,
    -7.332300809407010800e+000, -8.868148466875196000e+000,
    -7.895445920224761800e+000, -8.477688226774738200e+000,
    -6.724790281248850500e+000, -8.026080227654171400e+000,
    -8.247796522362861500e+000, -7.893131787368933100e+000,
    -7.953077643849715300e+000, -7.085517647070380700e+000,
    -7.757918623860442500e+000, -9.404980440162075800e+000,
    -9.111021916635516900e+000, -6.753547752596220200e+000,
    -6.208328120779675900e+000, -7.460712402671073400e+000,
    -8.051154905293161700e+000, -6.979795864345947000e+000,
    -7.285373299414776400e+000, -7.935549231771511300e+000,
    -7.333663096710840700e+000, -7.549354579130950400e+000,
    -7.125439770244579300e+000, -8.444455837718113100e+000,
    -7.607705936847165300e+000, -6.947711222611268100e+000,
    -7.559561213742542300e+000, -6.633232534378238100e+000,
    -7.285067573640397100e+000, -7.198034090285221800e+000,
    -8.301173708858458500e+000, -7.740676955875905200e+000,
    -8.389317110487786200e+000, -7.030503781850090800e+000,
    7.483837125022816400e-001, 9.972172897309477000e-001,
    8.635272324715717000e-001, 3.437357445286000600e-001,
    1.356057545748600200e+000, 7.747994541454063000e-001,
    -5.029337660688439900e-001, 7.320209587792132500e-001,
    9.007328043370961300e-001, 1.839182838430090300e+000,
    -1.352604803382542600e+000, 1.440339792882617200e+000,
    5.409160633286138600e-001, -9.096356667070149000e-002,
    2.145906552675194100e-001, 1.749366326171780000e+000,
    1.710862586429138200e+000, 5.617170924142114200e-001,
    8.075937970441778900e-001, 5.294053117812258500e-001,
    8.007328881544743000e-001, 6.824506852180559600e-001,
    -4.466422007073587200e-001, 4.125165857556476500e-001,
    1.264599468598445900e+000, 1.195482116831558800e+000,
    5.815701470999368200e-001, 1.480145121963046200e+000,
    1.228974130124139900e+000, -9.887375252743877400e-001,
    4.957232610676656800e-001, 2.201242074660017000e-001,
    -8.949779589135298300e-002, 4.463714750361750200e-001,
    1.104458211701637000e+000, 1.146057798756675600e+000,
    1.607064328082671100e+000, -3.342540671866551800e-001,
    -3.733869343080511400e-001, 1.376984209826379600e+000,
    1.134842638638303900e+000, 1.578816025652644900e+000,
    8.631161307174450800e-003, 6.628552272325566300e-001,
    -4.235551988694613600e-001, -5.931434773175525700e-002,
    1.107744286910284700e+000, 1.308043758809049000e+000,
    1.474220016986390400e+000, 6.094036504382410700e-001,
    2.586151051423653000e-001, 7.690092056142631100e-001,
    -1.580472136196336100e-001, 2.410499789745967300e-001,
    -4.419329075671284400e-001, 6.725262868347948700e-001,
    -2.443367984060260100e-001, 9.310955439202097700e-001,
    9.240837092450902800e-002, 9.816510048711224500e-001) ++
    Array.fill(51)(1.000000000000000000e+000) ++
    Array.fill(50)(-1.000000000000000000e+000) ++
    Array.fill(2)(-5.000000000000000000e-001) ++
    Array.fill(100)(-1.000000000000000000e+000) ++
    Array.fill(115)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(23)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(23)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(27)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(12)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(1)(1.000000000000000000e+000) ++
    Array.fill(2)(-1.000000000000000000e+000) ++
    Array.fill(1)(1.000000000000000000e+000)
  assert(Apr.length == 638)
  val b = /* b[114] */ Array.fill(100)(-1.0) ++ Array.fill(10)(0.0) ++ Array(0.5, 0.0, 0.0, -0.5)
  assert(b.length == 114)

  val x = new Array[Double](n)

  val flag = nativeECOSScala.EcosSolve(n, m, p, l, ncones, q, Gpr, Gjc, Gir, Apr, Ajc, Air, c, h, b, x)

  flag match {
    case 0 => System.out.println("Optimal")
    case 1 => System.out.println("Primal infeasible")
    case 2 => System.out.println("Dual infeasible")
  }
}
